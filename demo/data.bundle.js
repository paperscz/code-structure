var data = [{"file":"src/index.ts","results":[{"type":"call","file":"src/index.ts","line":627,"text":"executeCommandLine().then(() => {","children":[{"type":"call","file":"src/index.ts","line":627,"text":"executeCommandLine().then(() => {","children":[{"type":"definition","file":"src/index.ts","line":474,"text":"async function executeCommandLine() {","children":[{"type":"call","file":"src/index.ts","line":475,"text":"minimist(process.argv.slice(2), { \"--\": true });","children":[{"type":"definition","file":"node_modules/@types/minimist/index.d.ts","line":11,"text":"declare function minimist(args?: string[], opts?: minimist.Opts): minimist.ParsedArgs;","children":[]}]},{"type":"call","file":"src/index.ts","line":479,"text":"showToolVersion();","children":[{"type":"definition","file":"src/index.ts","line":22,"text":"function showToolVersion() {","children":[{"type":"call","file":"src/index.ts","line":23,"text":"printInConsole(`Version: ${packageJson.version}`);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":485,"text":"globAsync(file)))));","children":[{"type":"definition","file":"src/index.ts","line":26,"text":"function globAsync(pattern: string) {","children":[]}]},{"type":"call","file":"src/index.ts","line":490,"text":"minimatch(file, excludeFile)));","children":[{"type":"definition","file":"node_modules/@types/minimatch/index.d.ts","line":9,"text":"declare function M(target: string, pattern: string, options?: M.IOptions): boolean;","children":[]}]},{"type":"call","file":"src/index.ts","line":533,"text":"handle(node, {","children":[{"type":"definition","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[{"type":"call","file":"src/index.ts","line":161,"text":"handleCallExpression(callExpression.expression, context, sourceFile, file);","children":[{"type":"definition","file":"src/index.ts","line":120,"text":"function handleCallExpression(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[{"type":"call","file":"src/index.ts","line":123,"text":"handleDefinition(identifier, context, sourceFile, file);","children":[{"type":"definition","file":"src/index.ts","line":74,"text":"function handleDefinition(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | Tree[] | undefined {","children":[{"type":"call","file":"src/index.ts","line":78,"text":"findNodeAtDefinition(context.program, definition);","children":[{"type":"definition","file":"src/index.ts","line":38,"text":"function findNodeAtDefinition(program: ts.Program, definition: ts.DefinitionInfo) {","children":[]}]},{"type":"call","file":"src/index.ts","line":102,"text":"handle(statement, context, definitionNode.sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":103,"text":"pushIntoTrees(tree.children, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":110,"text":"handle(definitionNode.node, context, definitionNode.sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":127,"text":"handle(propertyAccessExpression.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":128,"text":"pushIntoTrees(trees, expressionTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":130,"text":"handleDefinition(propertyAccessExpression.name, context, sourceFile, file);","children":[{"type":"definition","file":"src/index.ts","line":74,"text":"function handleDefinition(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | Tree[] | undefined {","children":[{"type":"call","file":"src/index.ts","line":78,"text":"findNodeAtDefinition(context.program, definition);","children":[{"type":"definition","file":"src/index.ts","line":38,"text":"function findNodeAtDefinition(program: ts.Program, definition: ts.DefinitionInfo) {","children":[]}]},{"type":"call","file":"src/index.ts","line":102,"text":"handle(statement, context, definitionNode.sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":103,"text":"pushIntoTrees(tree.children, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":110,"text":"handle(definitionNode.node, context, definitionNode.sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":131,"text":"pushIntoTrees(trees, nameTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":136,"text":"handleDefinition(newExpression.expression, context, sourceFile, file);","children":[{"type":"definition","file":"src/index.ts","line":74,"text":"function handleDefinition(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | Tree[] | undefined {","children":[{"type":"call","file":"src/index.ts","line":78,"text":"findNodeAtDefinition(context.program, definition);","children":[{"type":"definition","file":"src/index.ts","line":38,"text":"function findNodeAtDefinition(program: ts.Program, definition: ts.DefinitionInfo) {","children":[]}]},{"type":"call","file":"src/index.ts","line":102,"text":"handle(statement, context, definitionNode.sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":103,"text":"pushIntoTrees(tree.children, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":110,"text":"handle(definitionNode.node, context, definitionNode.sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":140,"text":"handle(node, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":142,"text":"showSyntaxKind(node);","children":[{"type":"definition","file":"src/index.ts","line":51,"text":"function showSyntaxKind(node: ts.Node) {","children":[{"type":"call","file":"src/index.ts","line":55,"text":"printInConsole(node.kind);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]}]}]},{"type":"call","file":"src/index.ts","line":162,"text":"pushIntoTrees(tree.children, functionTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":171,"text":"handle(parameter, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":172,"text":"pushIntoTrees(trees, parameterTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":179,"text":"handle(forOfStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":183,"text":"handle(declaration.body, context, sourceFile, file) : undefined;","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":186,"text":"handle(propertyAssignmentExpression.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":190,"text":"handle(prefixUnaryExpression.operand, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":195,"text":"handle(expression.name, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":198,"text":"handle(exportDeclaration.exportClause, context, sourceFile, file) : undefined;","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":227,"text":"handle(expression.expression, context, sourceFile, file) : undefined;","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":234,"text":"handle(statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":235,"text":"pushIntoTrees(trees, childTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":239,"text":"handle(ifStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":240,"text":"pushIntoTrees(trees, ifTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":242,"text":"handle(ifStatement.thenStatement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":243,"text":"pushIntoTrees(trees, thenTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":246,"text":"handle(ifStatement.elseStatement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":247,"text":"pushIntoTrees(trees, elseTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":251,"text":"handle(binaryExpression.left, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":252,"text":"pushIntoTrees(trees, leftTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":254,"text":"handle(binaryExpression.right, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":255,"text":"pushIntoTrees(trees, rightTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":258,"text":"handle(variableStatement.declarationList, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":259,"text":"pushIntoTrees(trees, declarationListTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":263,"text":"handle(span, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":264,"text":"pushIntoTrees(trees, spanTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":269,"text":"handle(element, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":270,"text":"pushIntoTrees(trees, elementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":275,"text":"handle(property, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":276,"text":"pushIntoTrees(trees, propertyTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":281,"text":"handle(element, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":282,"text":"pushIntoTrees(trees, elementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":287,"text":"handle(statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":288,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":292,"text":"handle(switchStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":293,"text":"pushIntoTrees(trees, switchTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":295,"text":"handle(switchStatement.caseBlock, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":296,"text":"pushIntoTrees(trees, caseTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":299,"text":"handle(conditionalExpression.whenTrue, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":300,"text":"pushIntoTrees(trees, trueTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":302,"text":"handle(conditionalExpression.whenFalse, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":303,"text":"pushIntoTrees(trees, falseTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":307,"text":"handle(clause, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":308,"text":"pushIntoTrees(trees, clauseTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":313,"text":"handle(forStatement.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":314,"text":"pushIntoTrees(trees, initializerTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":318,"text":"handle(forStatement.condition, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":319,"text":"pushIntoTrees(trees, conditionTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":323,"text":"handle(forStatement.incrementor, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":324,"text":"pushIntoTrees(trees, incrementorTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":327,"text":"handle(forStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":328,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":331,"text":"handle(tryStatement.tryBlock, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":332,"text":"pushIntoTrees(trees, tryBlockTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":335,"text":"handle(tryStatement.catchClause, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":336,"text":"pushIntoTrees(trees, catchClauseTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":340,"text":"handle(tryStatement.finallyBlock, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":341,"text":"pushIntoTrees(trees, finallyBlockTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":347,"text":"handle(declaration.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":348,"text":"pushIntoTrees(trees, childTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":354,"text":"handle(catchClause.variableDeclaration, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":355,"text":"pushIntoTrees(trees, variableDeclarationTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":358,"text":"handle(catchClause.block, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":359,"text":"pushIntoTrees(trees, blockTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":362,"text":"handle(forInStatement.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":363,"text":"pushIntoTrees(trees, initializerTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":365,"text":"handle(forInStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":366,"text":"pushIntoTrees(trees, expressionTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":368,"text":"handle(forInStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":369,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":372,"text":"handle(whileStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":373,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":375,"text":"handle(whileStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":376,"text":"pushIntoTrees(trees, expressionTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":379,"text":"handle(elementAccessExpression.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":380,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":383,"text":"handle(elementAccessExpression.argumentExpression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":384,"text":"pushIntoTrees(trees, argumentExpressionTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":388,"text":"handle(functionExpression.body, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":389,"text":"pushIntoTrees(trees, bodyTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":392,"text":"handle(functionExpression.name, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":147,"text":"function handle(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":393,"text":"pushIntoTrees(trees, nameTree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":418,"text":"showSyntaxKind(node);","children":[{"type":"definition","file":"src/index.ts","line":51,"text":"function showSyntaxKind(node: ts.Node) {","children":[{"type":"call","file":"src/index.ts","line":55,"text":"printInConsole(node.kind);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]}]}]},{"type":"call","file":"src/index.ts","line":538,"text":"pushIntoTrees(trees, tree);","children":[{"type":"definition","file":"src/index.ts","line":58,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":546,"text":"printInConsole(`${(Date.now() - now) / 1000.0} s`);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":575,"text":"getJsonResult(tree)),","children":[{"type":"definition","file":"src/index.ts","line":444,"text":"function getJsonResult(tree: Tree): JsonResult {","children":[{"type":"call","file":"src/index.ts","line":456,"text":"getJsonResult(child));","children":[{"type":"nested","file":"src/index.ts","line":444,"text":"function getJsonResult(tree: Tree): JsonResult {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":580,"text":"mkdirp(dirname, error => {","children":[{"type":"definition","file":"node_modules/@types/mkdirp/index.d.ts","line":7,"text":"declare function mkdirp(dir: string, cb: (err: NodeJS.ErrnoException, made: string) => void): void;","children":[]}]},{"type":"call","file":"src/index.ts","line":582,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":592,"text":"mkdirp(dirname, error => {","children":[{"type":"definition","file":"node_modules/@types/mkdirp/index.d.ts","line":7,"text":"declare function mkdirp(dir: string, cb: (err: NodeJS.ErrnoException, made: string) => void): void;","children":[]}]},{"type":"call","file":"src/index.ts","line":594,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":611,"text":"getTextResult(tree, 1);","children":[{"type":"definition","file":"src/index.ts","line":425,"text":"function getTextResult(tree: Tree, intent: number) {","children":[{"type":"call","file":"src/index.ts","line":439,"text":"getTextResult(child, intent + 1);","children":[{"type":"nested","file":"src/index.ts","line":425,"text":"function getTextResult(tree: Tree, intent: number) {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":616,"text":"mkdirp(dirname, error => {","children":[{"type":"definition","file":"node_modules/@types/mkdirp/index.d.ts","line":7,"text":"declare function mkdirp(dir: string, cb: (err: NodeJS.ErrnoException, made: string) => void): void;","children":[]}]},{"type":"call","file":"src/index.ts","line":618,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]}]},{"type":"call","file":"src/index.ts","line":628,"text":"printInConsole(\"code-structure success.\");","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":630,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}];