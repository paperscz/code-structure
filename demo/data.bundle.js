var data = [{"file":"src/index.ts","results":[{"type":"call","file":"src/index.ts","line":625,"text":"executeCommandLine().then(() => {","children":[{"type":"call","file":"src/index.ts","line":625,"text":"executeCommandLine().then(() => {","children":[{"type":"definition","file":"src/index.ts","line":472,"text":"async function executeCommandLine() {","children":[{"type":"call","file":"src/index.ts","line":473,"text":"minimist(process.argv.slice(2), { \"--\": true });","children":[{"type":"definition","file":"node_modules/@types/minimist/index.d.ts","line":11,"text":"declare function minimist(args?: string[], opts?: minimist.Opts): minimist.ParsedArgs;","children":[]}]},{"type":"call","file":"src/index.ts","line":477,"text":"showToolVersion();","children":[{"type":"definition","file":"src/index.ts","line":22,"text":"function showToolVersion() {","children":[{"type":"call","file":"src/index.ts","line":23,"text":"printInConsole(`Version: ${packageJson.version}`);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":483,"text":"globAsync(file)))));","children":[{"type":"definition","file":"src/index.ts","line":26,"text":"function globAsync(pattern: string) {","children":[]}]},{"type":"call","file":"src/index.ts","line":488,"text":"minimatch(file, excludeFile)));","children":[{"type":"definition","file":"node_modules/@types/minimatch/index.d.ts","line":9,"text":"declare function M(target: string, pattern: string, options?: M.IOptions): boolean;","children":[]}]},{"type":"call","file":"src/index.ts","line":531,"text":"getCodeStructure(node, {","children":[{"type":"definition","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[{"type":"call","file":"src/index.ts","line":139,"text":"getCodeStructureOfDefinition(identifier, context, file);","children":[{"type":"definition","file":"src/index.ts","line":63,"text":"function getCodeStructureOfDefinition(node: ts.Node, context: Context, file: string): Tree | Tree[] | undefined {","children":[{"type":"call","file":"src/index.ts","line":103,"text":"getCodeStructure(statement, context, sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":104,"text":"pushIntoTrees(tree.children, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":110,"text":"getCodeStructure(definitionNode, context, sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":143,"text":"getCodeStructure(propertyAccessExpression.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":144,"text":"pushIntoTrees(propertyAccessTrees, expressionTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":146,"text":"getCodeStructureOfDefinition(propertyAccessExpression.name, context, file);","children":[{"type":"definition","file":"src/index.ts","line":63,"text":"function getCodeStructureOfDefinition(node: ts.Node, context: Context, file: string): Tree | Tree[] | undefined {","children":[{"type":"call","file":"src/index.ts","line":103,"text":"getCodeStructure(statement, context, sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":104,"text":"pushIntoTrees(tree.children, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":110,"text":"getCodeStructure(definitionNode, context, sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":147,"text":"pushIntoTrees(propertyAccessTrees, nameTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":152,"text":"getCodeStructureOfDefinition(newExpression.expression, context, file);","children":[{"type":"definition","file":"src/index.ts","line":63,"text":"function getCodeStructureOfDefinition(node: ts.Node, context: Context, file: string): Tree | Tree[] | undefined {","children":[{"type":"call","file":"src/index.ts","line":103,"text":"getCodeStructure(statement, context, sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":104,"text":"pushIntoTrees(tree.children, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":110,"text":"getCodeStructure(definitionNode, context, sourceFile, definition.fileName);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":156,"text":"getCodeStructure(callExpression.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":158,"text":"showSyntaxKind(callExpression.expression);","children":[{"type":"definition","file":"src/index.ts","line":38,"text":"function showSyntaxKind(node: ts.Node) {","children":[{"type":"call","file":"src/index.ts","line":42,"text":"printInConsole(node.kind);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":160,"text":"pushIntoTrees(tree.children, callTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":169,"text":"getCodeStructure(parameter, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":170,"text":"pushIntoTrees(trees, parameterTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":177,"text":"getCodeStructure(forOfStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":181,"text":"getCodeStructure(declaration.body, context, sourceFile, file) : undefined;","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":184,"text":"getCodeStructure(propertyAssignmentExpression.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":188,"text":"getCodeStructure(prefixUnaryExpression.operand, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":193,"text":"getCodeStructure(expression.name, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":196,"text":"getCodeStructure(exportDeclaration.exportClause, context, sourceFile, file) : undefined;","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":225,"text":"getCodeStructure(expression.expression, context, sourceFile, file) : undefined;","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":232,"text":"getCodeStructure(statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":233,"text":"pushIntoTrees(trees, childTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":237,"text":"getCodeStructure(ifStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":238,"text":"pushIntoTrees(trees, ifTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":240,"text":"getCodeStructure(ifStatement.thenStatement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":241,"text":"pushIntoTrees(trees, thenTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":244,"text":"getCodeStructure(ifStatement.elseStatement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":245,"text":"pushIntoTrees(trees, elseTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":249,"text":"getCodeStructure(binaryExpression.left, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":250,"text":"pushIntoTrees(trees, leftTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":252,"text":"getCodeStructure(binaryExpression.right, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":253,"text":"pushIntoTrees(trees, rightTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":256,"text":"getCodeStructure(variableStatement.declarationList, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":257,"text":"pushIntoTrees(trees, declarationListTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":261,"text":"getCodeStructure(span, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":262,"text":"pushIntoTrees(trees, spanTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":267,"text":"getCodeStructure(element, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":268,"text":"pushIntoTrees(trees, elementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":273,"text":"getCodeStructure(property, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":274,"text":"pushIntoTrees(trees, propertyTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":279,"text":"getCodeStructure(element, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":280,"text":"pushIntoTrees(trees, elementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":285,"text":"getCodeStructure(statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":286,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":290,"text":"getCodeStructure(switchStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":291,"text":"pushIntoTrees(trees, switchTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":293,"text":"getCodeStructure(switchStatement.caseBlock, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":294,"text":"pushIntoTrees(trees, caseTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":297,"text":"getCodeStructure(conditionalExpression.whenTrue, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":298,"text":"pushIntoTrees(trees, trueTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":300,"text":"getCodeStructure(conditionalExpression.whenFalse, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":301,"text":"pushIntoTrees(trees, falseTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":305,"text":"getCodeStructure(clause, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":306,"text":"pushIntoTrees(trees, clauseTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":311,"text":"getCodeStructure(forStatement.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":312,"text":"pushIntoTrees(trees, initializerTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":316,"text":"getCodeStructure(forStatement.condition, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":317,"text":"pushIntoTrees(trees, conditionTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":321,"text":"getCodeStructure(forStatement.incrementor, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":322,"text":"pushIntoTrees(trees, incrementorTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":325,"text":"getCodeStructure(forStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":326,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":329,"text":"getCodeStructure(tryStatement.tryBlock, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":330,"text":"pushIntoTrees(trees, tryBlockTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":333,"text":"getCodeStructure(tryStatement.catchClause, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":334,"text":"pushIntoTrees(trees, catchClauseTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":338,"text":"getCodeStructure(tryStatement.finallyBlock, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":339,"text":"pushIntoTrees(trees, finallyBlockTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":345,"text":"getCodeStructure(declaration.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":346,"text":"pushIntoTrees(trees, childTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":352,"text":"getCodeStructure(catchClause.variableDeclaration, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":353,"text":"pushIntoTrees(trees, variableDeclarationTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":356,"text":"getCodeStructure(catchClause.block, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":357,"text":"pushIntoTrees(trees, blockTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":360,"text":"getCodeStructure(forInStatement.initializer, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":361,"text":"pushIntoTrees(trees, initializerTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":363,"text":"getCodeStructure(forInStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":364,"text":"pushIntoTrees(trees, expressionTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":366,"text":"getCodeStructure(forInStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":367,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":370,"text":"getCodeStructure(whileStatement.statement, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":371,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":373,"text":"getCodeStructure(whileStatement.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":374,"text":"pushIntoTrees(trees, expressionTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":377,"text":"getCodeStructure(elementAccessExpression.expression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":378,"text":"pushIntoTrees(trees, statementTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":381,"text":"getCodeStructure(elementAccessExpression.argumentExpression, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":382,"text":"pushIntoTrees(trees, argumentExpressionTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":386,"text":"getCodeStructure(functionExpression.body, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":387,"text":"pushIntoTrees(trees, bodyTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":390,"text":"getCodeStructure(functionExpression.name, context, sourceFile, file);","children":[{"type":"nested","file":"src/index.ts","line":122,"text":"function getCodeStructure(node: ts.Node, context: Context, sourceFile: ts.SourceFile, file: string): Tree | undefined | Tree[] {","children":[]}]},{"type":"call","file":"src/index.ts","line":391,"text":"pushIntoTrees(trees, nameTree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":416,"text":"showSyntaxKind(node);","children":[{"type":"definition","file":"src/index.ts","line":38,"text":"function showSyntaxKind(node: ts.Node) {","children":[{"type":"call","file":"src/index.ts","line":42,"text":"printInConsole(node.kind);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]}]}]},{"type":"call","file":"src/index.ts","line":536,"text":"pushIntoTrees(trees, tree);","children":[{"type":"definition","file":"src/index.ts","line":45,"text":"function pushIntoTrees(trees: Tree[], tree: undefined | Tree | Tree[]) {","children":[]}]},{"type":"call","file":"src/index.ts","line":544,"text":"printInConsole(`${(Date.now() - now) / 1000.0} s`);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":573,"text":"getJsonResult(tree)),","children":[{"type":"definition","file":"src/index.ts","line":442,"text":"function getJsonResult(tree: Tree): JsonResult {","children":[{"type":"call","file":"src/index.ts","line":454,"text":"getJsonResult(child));","children":[{"type":"nested","file":"src/index.ts","line":442,"text":"function getJsonResult(tree: Tree): JsonResult {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":578,"text":"mkdirp(dirname, error => {","children":[{"type":"definition","file":"node_modules/@types/mkdirp/index.d.ts","line":7,"text":"declare function mkdirp(dir: string, cb: (err: NodeJS.ErrnoException, made: string) => void): void;","children":[]}]},{"type":"call","file":"src/index.ts","line":580,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":590,"text":"mkdirp(dirname, error => {","children":[{"type":"definition","file":"node_modules/@types/mkdirp/index.d.ts","line":7,"text":"declare function mkdirp(dir: string, cb: (err: NodeJS.ErrnoException, made: string) => void): void;","children":[]}]},{"type":"call","file":"src/index.ts","line":592,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":609,"text":"getTextResult(tree, 1);","children":[{"type":"definition","file":"src/index.ts","line":423,"text":"function getTextResult(tree: Tree, intent: number) {","children":[{"type":"call","file":"src/index.ts","line":437,"text":"getTextResult(child, intent + 1);","children":[{"type":"nested","file":"src/index.ts","line":423,"text":"function getTextResult(tree: Tree, intent: number) {","children":[]}]}]}]},{"type":"call","file":"src/index.ts","line":614,"text":"mkdirp(dirname, error => {","children":[{"type":"definition","file":"node_modules/@types/mkdirp/index.d.ts","line":7,"text":"declare function mkdirp(dir: string, cb: (err: NodeJS.ErrnoException, made: string) => void): void;","children":[]}]},{"type":"call","file":"src/index.ts","line":616,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}]}]},{"type":"call","file":"src/index.ts","line":626,"text":"printInConsole(\"code-structure success.\");","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]},{"type":"call","file":"src/index.ts","line":628,"text":"printInConsole(error);","children":[{"type":"definition","file":"src/index.ts","line":14,"text":"function printInConsole(message: any) {","children":[]}]}]}];